        -:    0:Source:src/sort.c
        -:    0:Graph:sort.gcno
        -:    0:Data:sort.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "sort.h"
        -:    2:
function sort called 136 returned 100% blocks executed 97%
      136:    3:int sort(int* a, int length, char* type, int algorithm) {
      136:    4:    int status = 0;
      136:    5:    int *s = (int*)malloc(sizeof(int)*length);
      136:    6:    memcpy(s,a,sizeof(int)*(length));
      136:    7:    if (length < 2 || length > 20) {
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 7%
branch  3 taken 93%
       22:    8:        status = 1;
       22:    9:    }
        -:   10:    else {
      114:   11:        switch(algorithm){
branch  0 taken 0%
branch  1 taken 10%
branch  2 taken 10%
branch  3 taken 13%
branch  4 taken 13%
branch  5 taken 15%
branch  6 taken 13%
branch  7 taken 13%
branch  8 taken 13%
        -:   12:            case COUNTING:
       11:   13:                if (!strcmp(type,"On"))
branch  0 taken 55%
branch  1 taken 45%
        6:   14:                    counting_sort(s, length);
        -:   15:                else
        5:   16:                    status = 1;
       11:   17:                break;
        -:   18:            case RADIX:
       11:   19:                if (!strcmp(type,"On"))
branch  0 taken 55%
branch  1 taken 45%
        6:   20:                    radix_sort(s, length);
        -:   21:                else
        5:   22:                    status = 1;
       11:   23:                break;
        -:   24:            case BUBBLE:
       15:   25:                if (!strcmp(type,"On2"))
branch  0 taken 67%
branch  1 taken 33%
       10:   26:                    bubble_sort(s, length);
        -:   27:                else
        5:   28:                    status = 1;
       15:   29:                break;
        -:   30:            case INSERTION:
       15:   31:                if (!strcmp(type,"On2"))
branch  0 taken 67%
branch  1 taken 33%
       10:   32:                    insertion_sort(s, length);
        -:   33:                else
        5:   34:                    status = 1;
       15:   35:                break;
        -:   36:            case SELECTION:
       17:   37:                if (!strcmp(type,"On2"))
branch  0 taken 65%
branch  1 taken 35%
       11:   38:                    selection_sort(s, length);
        -:   39:                else
        6:   40:                    status = 1;
       17:   41:                break;
        -:   42:            case HEAP:
       15:   43:                if (!strcmp(type,"Onlogn"))
branch  0 taken 67%
branch  1 taken 33%
       10:   44:                    heap_sort(s, length);
        -:   45:                else
        5:   46:                    status = 1;
       15:   47:                break;
        -:   48:            case MERGE:
       15:   49:                if (!strcmp(type,"Onlogn"))
branch  0 taken 67%
branch  1 taken 33%
       10:   50:                    merge_sort(s, 0, length - 1);
        -:   51:                else
        5:   52:                    status = 1;
       15:   53:                break;
        -:   54:            case QUICK:
       15:   55:                if (!strcmp(type,"Onlogn"))
branch  0 taken 67%
branch  1 taken 33%
       10:   56:                    quick_sort(s, 0, length - 1);
        -:   57:                else
        5:   58:                    status = 1;
       15:   59:                break;
        -:   60:            default:
    #####:   61:                status = 1;
    #####:   62:                break;
        -:   63:            }
        -:   64:    }
      136:   65:    memcpy(a,s,sizeof(int)*(length));
      136:   66:    free(s);
      136:   67:    return status;
        -:   68:}
