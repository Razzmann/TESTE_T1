        -:    0:Source:src/heap_sort.c
        -:    0:Graph:heap_sort.gcno
        -:    0:Data:heap_sort.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*Heap sort implementation in C*/
        -:    2:#include <stdio.h>
        -:    3:#include <stdlib.h>
        -:    4:typedef int TYPE;
        -:    5:int left(int);
        -:    6:int right(int); 
        -:    7:int parent(int);
        -:    8:void max_heapify(TYPE [], int, int);
        -:    9:void build_max_heap(TYPE [], int);
        -:   10:void heap_sort(TYPE [], int);
        -:   11:
function heap_sort called 10 returned 100% blocks executed 100%
       10:   12:void heap_sort(TYPE a[], int length){
       10:   13:	build_max_heap(a, length);
       10:   14:	int i = length - 1;
       10:   15:	do {
      110:   16:		TYPE temp = a[0];
      110:   17:		a[0] = a[i];
      110:   18:		a[i] = temp;
        -:   19:		
      110:   20:		max_heapify(a, 0, --length);
      110:   21:	} while(--i >= 0);
branch  0 taken 91%
branch  1 taken 9%
       10:   22:}
function build_max_heap called 10 returned 100% blocks executed 100%
       10:   23:void build_max_heap(TYPE a[], int length){
       10:   24:	int i = length/2;
       10:   25:	do {
       63:   26:		max_heapify(a, i, length);
       63:   27:	}while(--i  >= 0); //first i = i - 1 is doen and then i >= 0 afterwards.
branch  0 taken 84%
branch  1 taken 16%
       10:   28:}
function max_heapify called 360 returned 100% blocks executed 100%
      360:   29:void max_heapify(TYPE a[], int i, int length){
      360:   30:	int r = right(i);
      360:   31:	int l = left(i);
      360:   32:	int max = i;
      360:   33:	if(l < length && a[max] < a[l]) max = l;
branch  0 taken 66%
branch  1 taken 34%
branch  2 taken 24%
branch  3 taken 76%
      360:   34:	if(r < length && a[max] < a[r]) max = r;
branch  0 taken 58%
branch  1 taken 42%
branch  2 taken 63%
branch  3 taken 37%
      360:   35:	if(max != i) {
branch  0 taken 48%
branch  1 taken 52%
      187:   36:		TYPE temp = a[i];
      187:   37:		a[i] = a[max];
      187:   38:		a[max] = temp;
      187:   39:		max_heapify(a, max, length);
      187:   40:	}
      360:   41:}
function left called 360 returned 100% blocks executed 100%
      360:   42:int left(int i) {
      360:   43:	return 2*i + 1;
        -:   44:}
function right called 360 returned 100% blocks executed 100%
      360:   45:int right(int i) {
      360:   46:	return 2*i + 2;
        -:   47:}
function parent called 0 returned 0% blocks executed 0%
    #####:   48:int parent(int i) {
    #####:   49:	return (i - 1)/2;
        -:   50:}
