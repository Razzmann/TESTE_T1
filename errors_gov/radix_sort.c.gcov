        -:    0:Source:src/radix_sort.c
        -:    0:Graph:radix_sort.gcno
        -:    0:Data:radix_sort.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*Implementation of Radix sort via queue in C. 
        -:    2:	This implementation works with integers*/
        -:    3:#include <stdio.h>
        -:    4:#include <stdlib.h>
        -:    5:#define MAX_BUCKETS 10
        -:    6:typedef int TYPE;
        -:    7:typedef struct node_st { 
        -:    8:	TYPE inf;
        -:    9:	struct node_st *pnext;
        -:   10:} NODE;
        -:   11:typedef struct queue_st {
        -:   12:	NODE *pbegin, *pend;
        -:   13:} QUEUE;
        -:   14:
        -:   15:void init_queue(QUEUE *);
        -:   16:NODE *make_node(TYPE);
        -:   17:void inqueue(QUEUE *, TYPE );
        -:   18:TYPE dequeue(QUEUE *);
        -:   19:int is_empty(QUEUE);
        -:   20:
        -:   21:int find_max_significant(TYPE [], int);
        -:   22:void radix_sort(TYPE [], int);
        -:   23:
function radix_sort called 6 returned 100% blocks executed 100%
        6:   24:void radix_sort(TYPE a[], int length){
        -:   25:	QUEUE buckets[MAX_BUCKETS]; // buckets for 0, 1, 2, ... 9 significant digits
        -:   26:	int i, j;
       66:   27:	for(i = 0; i < MAX_BUCKETS; i++)
branch  0 taken 91%
branch  1 taken 9%
       60:   28:		init_queue(&buckets[i]);
        -:   29:	
        6:   30:	int k = find_max_significant(a, length);
        6:   31:	int m = 10, n = 1, p;
        -:   32:	
       26:   33:	for(i = 0; i < k; i++){
branch  0 taken 77%
branch  1 taken 23%
      251:   34:		for(j = 0; j < length; j++){
branch  0 taken 92%
branch  1 taken 8%
      231:   35:			inqueue(&buckets[((int)a[j]%m)/n], a[j]);
      231:   36:		}
      220:   37:		for(p = 0, j = 0; j < MAX_BUCKETS; j++){
branch  0 taken 91%
branch  1 taken 9%
      431:   38:			while(!is_empty(buckets[j])) {
branch  0 taken 54%
branch  1 taken 46%
      231:   39:				a[p++] = dequeue(&buckets[j]); 
        -:   40:				//first a[p] = ... is done and then p++ afterwards.
        -:   41:			}
      200:   42:		}
       20:   43:		n*=10;
       20:   44:		m*=10;
       20:   45:	}
        6:   46:}
        -:   47:
function init_queue called 60 returned 100% blocks executed 100%
       60:   48:void init_queue(QUEUE *pque){
       60:   49:	pque->pbegin = pque->pend = NULL;
       60:   50:} 
function make_node called 231 returned 100% blocks executed 66%
      231:   51:NODE *make_node(TYPE inf){
      231:   52:	NODE *pnew = malloc(sizeof(NODE));
      231:   53:	if(pnew == NULL){
branch  0 taken 0%
branch  1 taken 100%
    #####:   54:		puts("ERROR: Out of RAM!");
    #####:   55:		exit(4);
        -:   56:	}
      231:   57:	pnew->inf = inf;
      231:   58:	pnew->pnext = NULL;
      231:   59:	return pnew;
        -:   60:}
function inqueue called 231 returned 100% blocks executed 100%
      231:   61:void inqueue(QUEUE *pque, TYPE inf){
      231:   62:	NODE *pnew = make_node(inf);
        -:   63:	
        -:   64:	/*This would mean that my queue is empty*/
      231:   65:	if(pque->pbegin == NULL) {
branch  0 taken 26%
branch  1 taken 74%
       59:   66:		pque->pbegin = pque->pend = pnew;
       59:   67:	}
        -:   68:	else {
      172:   69:		pque->pend->pnext = pnew;
      172:   70:		pque->pend = pnew;
        -:   71:	}
      231:   72:}
function dequeue called 231 returned 100% blocks executed 83%
      231:   73:TYPE dequeue(QUEUE *pque) {
      231:   74:	NODE *ptemp = pque->pbegin;	
      231:   75:	if(ptemp == NULL) {
branch  0 taken 0%
branch  1 taken 100%
    #####:   76:		puts("ERROR: You tried to dequeue an empty queue.");
    #####:   77:		exit(5);
        -:   78:	}
        -:   79:	TYPE x;
        -:   80:	
        -:   81:	/*If below means that they are on last element (ex. pbegin--- 36 
        -:   82:																								/
        -:   83:																							pend    )*/
      231:   84:	if(pque->pbegin == pque->pend) pque->pend = pque->pbegin = NULL;
branch  0 taken 74%
branch  1 taken 26%
      172:   85:	else pque->pbegin = ptemp->pnext;
      231:   86:	x = ptemp->inf;
        -:   87:	
      231:   88:	free(ptemp);
      231:   89:	return x;
        -:   90:	
        -:   91:}
        -:   92:/*returns 1 if it is and 0 if it isn't*/
function is_empty called 431 returned 100% blocks executed 100%
      431:   93:int is_empty(QUEUE pque) {
      431:   94:	if(pque.pbegin == NULL) return 1;
branch  0 taken 46%
branch  1 taken 54%
      231:   95:	else return 0;
      431:   96:}
function find_max_significant called 6 returned 100% blocks executed 100%
        6:   97:int find_max_significant(TYPE a[], int length){
        6:   98:	int i = 0; 
        6:   99:	TYPE max = a[0];
        -:  100:	
       66:  101:	while(++i < length) {
branch  0 taken 91%
branch  1 taken 9%
       60:  102:		if(a[i] > max) max = a[i];
branch  0 taken 62%
branch  1 taken 38%
        -:  103:	}
        6:  104:	int nb_digits = 0;
       26:  105:	while(max != 0) {
branch  0 taken 77%
branch  1 taken 23%
       20:  106:		++nb_digits;
       20:  107:		max = (int)max / 10;
        -:  108:	}
        6:  109:	return nb_digits;
        -:  110:}
