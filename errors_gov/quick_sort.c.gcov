        -:    0:Source:src/quick_sort.c
        -:    0:Graph:quick_sort.gcno
        -:    0:Data:quick_sort.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://Implementation of Quick Sort in C
        -:    2:#include <stdio.h>
        -:    3:#include <stdlib.h>
        -:    4:#define swap(t, x, y) { t z = x; x = y; y = z; }
        -:    5:typedef int TYPE;
        -:    6:int partition(TYPE [], int, int);
        -:    7:void quick_sort(TYPE [], int, int);
        -:    8:
function partition called 71 returned 100% blocks executed 100%
       71:    9:int partition(TYPE A[], int p, int r) {
       71:   10:	TYPE x = A[r]; //pivot
       71:   11:	int i = p - 1, j;
      446:   12:	for(j = p; j < r ; j++) {
branch  0 taken 84%
branch  1 taken 16%
      375:   13:		if(A[j] <= x) {
branch  0 taken 32%
branch  1 taken 68%
      254:   14:			i = i + 1;
      254:   15:			swap(TYPE, A[i], A[j]); 
      254:   16:		}
      375:   17:	}
       71:   18:	i = i + 1;
       71:   19:	swap(TYPE, A[i], A[r]);
       71:   20:	return i;
        -:   21:}
function quick_sort called 152 returned 100% blocks executed 100%
      152:   22:void quick_sort(TYPE A[], int p, int r) {
      152:   23:	if(p < r) {
branch  0 taken 53%
branch  1 taken 47%
       71:   24:		int t = (rand() % ( r - p + 1) + p);
       71:   25:		swap(TYPE, A[t], A[r]); 
        -:   26:		//Used to avoid O(n^2) worst case
        -:   27:		
       71:   28:		int q = partition(A, p, r);
       71:   29:		quick_sort(A, p, q - 1);
       71:   30:		quick_sort(A, q + 1, r);
       71:   31:	}
      152:   32:}
